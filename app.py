import streamlit as st

import yfinance as yf

import pandas as pd

import ta

import time

import numpy as np  # Explicitly import numpy


st.set_page_config(page_title="Swing Stock Screener", layout="wide")

st.title("Swing Trading Screener - Nifty 200")


# Sample Nifty 200 subset (you can expand this list)

stocks = [

    "RELIANCE.NS", "TCS.NS", "INFY.NS", "HDFCBANK.NS", "ICICIBANK.NS",

    "HINDUNILVR.NS", "SBIN.NS", "BHARTIARTL.NS", "KOTAKBANK.NS", "ITC.NS",

    "ASIANPAINT.NS", "BAJFINANCE.NS", "LT.NS", "AXISBANK.NS", "DMART.NS",

    "MARUTI.NS", "WIPRO.NS", "TITAN.NS", "HCLTECH.NS", "IRFC.NS", "PURVA.NS"

]


error_messages = []  # Collect errors to show in app


# Function to fetch data and calculate indicators

def get_stock_signal(ticker):

    try:

        df_original = yf.download(ticker, period="90d", interval="1d", auto_adjust=True, progress=False)

        df_original.dropna(inplace=True)


        if df_original.empty:

            raise ValueError("Downloaded DataFrame is empty")


        close_series = df_original[('Close', ticker)].astype(float)

        volume_series = df_original[('Volume', ticker)].astype(float)


        # Create a new DataFrame with a simple index and columns

        df = pd.DataFrame({'Close': close_series, 'Volume': volume_series})

        df.index = close_series.index


        # Calculate EMA

        df['EMA20'] = ta.trend.EMAIndicator(close=df['Close'], window=20).ema_indicator()


        # Calculate RSI

        rsi_indicator = ta.momentum.RSIIndicator(close=df['Close'], window=14)

        df['RSI'] = rsi_indicator.rsi()


        # Calculate MACD

        macd_indicator = ta.trend.MACD(close=df['Close'], window_fast=12, window_slow=26, window_sign=9)

        df['MACD'] = macd_indicator.macd()

        df['MACD_signal'] = macd_indicator.macd_signal()


        df['Volume_avg'] = df['Volume'].rolling(window=20).mean()

        df.dropna(inplace=True) # Drop NaN generated by indicators


        if len(df) < 2:  # Need at least two data points to check for crosses

            return {

                "Stock": ticker.replace(".NS", ""),

                "Close": round(float(df['Close'].iloc[-1]), 2) if not df.empty else None,

                "RSI": round(float(df['RSI'].iloc[-1]), 2) if 'RSI' in df and not df.empty else None,

                "MACD": round(float(df['MACD'].iloc[-1]), 2) if 'MACD' in df and not df.empty else None,

                "Vol%": round(float((df_original[('Volume', ticker)].iloc[-1] / df['Volume'].mean()) * 100), 1) if not df.empty else None,

                "Signal": "HOLD"

            }


        latest = df.iloc[-1]

        previous = df.iloc[-2]

        latest_original_df = df_original.iloc[-1] # For original volume


        buy_signal = False

        sell_signal = False


        # RSI Signals

        if latest['RSI'] < 30 and previous['RSI'] >= 30:

            buy_signal = True

        elif latest['RSI'] > 70 and previous['RSI'] <= 70:

            sell_signal = True


        # MACD Signals

        if latest['MACD'] > latest['MACD_signal'] and previous['MACD'] <= previous['MACD_signal']:

            buy_signal = True

        elif latest['MACD'] < latest['MACD_signal'] and previous['MACD'] >= previous['MACD_signal']:

            sell_signal = True


        signal = "BUY" if buy_signal else "SELL" if sell_signal else "HOLD"


        return {

            "Stock": ticker.replace(".NS", ""),

            "Close": round(float(latest['Close']), 2) if 'Close' in latest else None,

            "RSI": round(float(latest['RSI']), 2) if 'RSI' in latest else None,

            "MACD": round(float(latest['MACD']), 2) if 'MACD' in latest else None,

            "Vol%": round(float((latest_original_df[('Volume', ticker)] / latest['Volume_avg']) * 100), 1) if 'Volume_avg' in latest else None,

            "Signal": signal

        }

    except Exception as e:

        msg = f"{ticker.replace('.NS', '')}: {str(e)}"

        error_messages.append(msg)

        return {

            "Stock": ticker.replace(".NS", ""),

            "Close": None, "RSI": None, "MACD": None, "Vol%": None, "Signal": "ERROR"

        }


st.info("Fetching data and calculating signals... Please wait a moment.")


results = []

for stock in stocks:

    result = get_stock_signal(stock)

    results.append(result)

    time.sleep(1)  # Add delay


# Convert to DataFrame

df_result = pd.DataFrame(results)

df_result = df_result[df_result['Signal'] != "ERROR"]  # Remove error rows


def color_signal(val):

    if val == 'BUY':

        return 'background-color: lightgreen; color: black'

    elif val == 'SELL':

        return 'background-color: lightcoral; color: black'

    elif val == 'HOLD':

        return 'background-color: yellow; color: black'

    return ''


if "Signal" in df_result.columns and not df_result.empty:

    # Filters

    signal_filter = st.selectbox("Filter by Signal", ["All", "BUY", "SELL", "HOLD"])


    if signal_filter != "All":

        df_result = df_result[df_result['Signal'] == signal_filter]


    styled_df = df_result.style.map(color_signal, subset=['Signal'])

    st.dataframe(styled_df, use_container_width=True)


    st.download_button(

        "Download CSV", df_result.to_csv(index=False), file_name="swing_signals.csv"

    )

else:

    st.warning("No valid data was returned. Please try again later.")


if error_messages:

    with st.expander("⚠️ Errors occurred while fetching data"):

        for err in error_messages:

            st.write(err) 